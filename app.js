var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var passport = require('passport');
//var game = require('./app/routes/game.server.routes');
//var users = require('./app/routes/users.server.routes');

// [SH] Bring in the data model
require('./app/models/db');
// [SH] Bring in the Passport config after model is defined
require('./app/config/passport');

// Databases to be used:
//User = require('./models/user.server/model.js');     // seems wrong hee=!
// questionSchema-DB
var Quiz = require('./app/models/quiz');

// [SH] Bring in the routes for the API (delete the default routes)
var routesApi = require('./app/routes/index');

var app = express();
var router = express.Router();

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(path.join(__dirname, 'app_client')));
app.use(express.static(path.join(__dirname, '/app/views')));
app.use(express.static(path.join(__dirname, '/app_client/auth/register')));


// view engine setup
app.set('views', path.join(__dirname, '/app/views'));
app.set('view engine', 'ejs');


// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());

// [SH] Initialise Passport before using the route middleware
app.use(passport.initialize());

// [SH] Use the API routes when path starts with /api
app.use('/api', routesApi);

//app.use('/game', game);
//app.use('/users', users);

// [SH] Catch unauthorised errors
app.use(function (err, req, res, next) {
  if (err.name === 'UnauthorizedError') {
    res.status(401);
    res.json({"message" : err.name + ": " + err.message});
  }
});

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
});


/*// catch 404 and forward to error handler
/* måtte kommentere bort denne for å ikke alltid komme til error-siden
//catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error.ejs', {root: __dirname + "/app/views" });
});*/



// ROUTES


app.use("/", router);


router.get("/game", function (req, res) {
  res.render("game.ejs", {
      root: __dirname + "/app/views",
        title: 'GeoQuiz'});

});

router.get("/register", function (req, res) {
  res.render("register.view.ejs", {
      root: __dirname + "/app/view",
        title: 'GeoQuiz'});

});

router.get("/signin", function (req, res) {
  res.render("login.view.ejs", {
      root: __dirname + "/app/view",
        title: 'GeoQuiz'});

});

router.get("/", function (req, res) {
  res.render("home.view.ejs", {
      root: __dirname + "/app/view",
        title: 'GeoQuiz'});

});


// Database setup

mongoose.Promise = global.Promise;  // try to avoid error

// Connect to db
mongoose.connect('mongodb://heroku_npcxr9bk:ieb5lgo7ejufsm557rnife02s4@ds111851.mlab.com:11851/heroku_npcxr9bk');


// accessing database
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error'));
db.once('open', function(){
    console.log("connected")});

var Quiz = require('./app/models/quizSchema');

var newQuiz = Quiz({
    "_id": 1,
    "question": "Det hele åpner med at du møter en dame i slutten av 70-årene som forteller at hun har gjort politisk comeback på sine eldre dager. Men i en seksårsperiode på 1990-tallet var hun president, og hennes folk her hjemme er spesielt aktive i påsken. Likevel var hele verden hennes arbeidsfelt, og den byen som var hovedsete for hennes arbeid, er ditt neste reisemål. Selve symbolet for hen- nes virke er omvendt av flagget i landet der, men i andre deler av verden brukes et himmellegeme som symbol. Også en kollega av henne fra hennes første politiske karriere tilbrakte mye tid i denne byen på 1990- og 2000-talllet, og begge er de engasjert i arbeid for mennesker og menneskenes helse.",
    "answer_city": "Genève",
    "answer": "Turen videre går til Genève!",
    "geojson_coordinates": {
        "type": "GeometryCollection",
        "geometries": [{
            "type": "MultiPolygon",
            "coordinates": [[[[6.1106811, 46.202815700000002], [6.1107494, 46.202415700000003], [6.1108937, 46.202485799999998], [6.1110423, 46.201635500000002], [6.1112827, 46.201723899999998], [6.1112376, 46.201565799999997], [6.1113412, 46.200273699999997], [6.1112895, 46.1999809], [6.1114709, 46.198446099999998], [6.1118357, 46.197090600000003], [6.1119392, 46.196953399999998], [6.1121098, 46.196862500000002], [6.1123985, 46.196827999999996], [6.1162469, 46.197215399999997], [6.1162747, 46.197068899999998], [6.1215718, 46.197607699999999], [6.1217209, 46.196584799999997], [6.1215001, 46.196194599999998], [6.1215529, 46.196120399999998], [6.1216185, 46.196077099999997], [6.1221616, 46.196053900000003], [6.1224869, 46.195974800000002], [6.1229869, 46.195982600000001], [6.1234497, 46.1958415], [6.1240874, 46.196016299999997], [6.124258, 46.196009400000001], [6.1245103, 46.196083199999997], [6.1247497, 46.196212500000001], [6.1248098, 46.196312800000001], [6.1255138, 46.1964915], [6.1257001, 46.196607499999999], [6.1258666, 46.196632399999999], [6.1261683, 46.196879199999998], [6.1264584, 46.1969317], [6.1267958, 46.1970861], [6.1269845, 46.197143799999999], [6.1273756, 46.197096000000002], [6.1268521, 46.195406599999998], [6.1271259, 46.1953715], [6.1269585, 46.1946011], [6.1277006, 46.194712000000003], [6.1277851, 46.194763000000002], [6.1278705, 46.194731099999998], [6.1279165, 46.194646400000003], [6.1278989, 46.190404700000002], [6.1277773, 46.188948099999998], [6.1277827, 46.187927199999997], [6.1276579, 46.187769899999999], [6.1276534, 46.187767899999997], [6.1285346, 46.187824200000001], [6.1288435, 46.1879141], [6.1290702, 46.188023800000003], [6.1290802, 46.1880965], [6.1315895, 46.189376199999998], [6.131851, 46.189219600000001], [6.1350177, 46.190867099999998], [6.137014, 46.188808000000002], [6.1373993, 46.188851300000003], [6.1395626, 46.188753900000002], [6.1397085, 46.188640399999997], [6.1414433, 46.189079999999997], [6.141953, 46.187998399999998], [6.1427662, 46.187343200000001], [6.1439201, 46.186933199999999], [6.1448426, 46.186799100000002], [6.1459722, 46.186750799999999], [6.1473041, 46.186810999999999], [6.1481991, 46.186863600000002], [6.151098, 46.186652199999997], [6.1522551, 46.1866159], [6.1530919, 46.186439399999998], [6.1537564, 46.186107200000002], [6.1541884, 46.185662700000002], [6.1544137, 46.185234299999998], [6.1545345, 46.184704199999999], [6.1538765, 46.180186200000001], [6.1538335, 46.179838599999997], [6.1542085, 46.179161399999998], [6.154749, 46.178540400000003], [6.1552215, 46.178223000000003], [6.1557863, 46.177981899999999], [6.1564817, 46.177818100000003], [6.1572309, 46.177772300000001], [6.1577438, 46.1778221], [6.1583889, 46.178023000000003], [6.1587783, 46.178203199999999], [6.1593405, 46.178671299999998], [6.1596397, 46.1791713], [6.1597222, 46.180549300000003], [6.1598232, 46.181008499999997], [6.1600335, 46.181501400000002], [6.1613365, 46.183510099999999], [6.1619787, 46.1843541], [6.1622679, 46.184908], [6.1623814, 46.185318600000002], [6.1623961, 46.185792399999997], [6.1622827, 46.1861642], [6.1622755, 46.186482599999998], [6.1624214, 46.187141799999999], [6.1625566, 46.187315400000003], [6.162979, 46.187678300000002], [6.163571, 46.187973200000002], [6.164232, 46.188118099999997], [6.1647496, 46.188170100000001], [6.1656548, 46.188120400000003], [6.166333, 46.187939299999996], [6.1674783, 46.187466100000002], [6.167871, 46.187263700000003], [6.1677061, 46.188131900000002], [6.1675472, 46.188968600000003], [6.1676274, 46.189056700000002], [6.1674007, 46.189607199999998], [6.1673746, 46.189863099999997], [6.1674616, 46.189963499999998], [6.1693155, 46.1912308], [6.1725979, 46.193805699999999], [6.1726402, 46.193890600000003], [6.1714098, 46.1943445], [6.1713429, 46.194456600000002], [6.171245, 46.194504199999997], [6.1731508, 46.196582599999999], [6.1743609, 46.198305400000002], [6.1747359, 46.199438600000001], [6.1746943, 46.199480200000004], [6.1742253, 46.199569699999998], [6.1743255, 46.199834899999999], [6.1755479, 46.201063900000001], [6.1758296, 46.2013307], [6.1737407, 46.202476400000002], [6.1738603, 46.202606699999997], [6.1733974, 46.202954499999997], [6.1741512, 46.203448100000003], [6.1742328, 46.203405099999998], [6.1744876, 46.203674800000002], [6.1749641, 46.204013000000003], [6.1739901, 46.204464000000002], [6.17469, 46.205185899999996], [6.1756613, 46.205815999999999], [6.1758527, 46.2057851], [6.1751153, 46.206711599999998], [6.1749893, 46.206798900000003], [6.1748382, 46.206831200000003], [6.1748832, 46.207024500000003], [6.1742154, 46.206734099999998], [6.1717373, 46.205880899999997], [6.1707613, 46.206696200000003], [6.1708893, 46.2076487], [6.1719107, 46.208502299999999], [6.1722802, 46.208745100000002], [6.1721504, 46.208837199999998], [6.1732894, 46.209598100000001], [6.1729185, 46.2098625], [6.1730272, 46.209887600000002], [6.1713854, 46.211055399999999], [6.1725558, 46.211599700000001], [6.172369, 46.211889900000003], [6.1619071, 46.215222400000002], [6.1627452, 46.216612699999999], [6.1659328, 46.222453700000003], [6.1667079, 46.224465299999999], [6.1499701, 46.227552199999998], [6.1494789, 46.227662500000001], [6.1489475, 46.2277907], [6.1490008, 46.2279822], [6.1468042, 46.2283951], [6.145981, 46.228756099999998], [6.1458896, 46.228726100000003], [6.145638, 46.228923199999997], [6.1437053, 46.230097700000002], [6.1434351, 46.230635300000003], [6.1428714, 46.229298800000002], [6.1402345, 46.229961600000003], [6.1385399, 46.230291100000002], [6.1388278, 46.2296093], [6.13887, 46.229052000000003], [6.1388235, 46.228749200000003], [6.1386943, 46.228439299999998], [6.1384951, 46.228172399999998], [6.1382992, 46.228117300000001], [6.1379505, 46.228180100000003], [6.1374475, 46.228492199999998], [6.1369597, 46.229227999999999], [6.1366112, 46.230067900000002], [6.1363468, 46.230355699999997], [6.1359301, 46.2306259], [6.1345702, 46.230668899999998], [6.1340866, 46.230969000000002], [6.1330815, 46.231884999999998], [6.132952, 46.231817300000003], [6.1329315, 46.231747499999997], [6.1326773, 46.2316687], [6.1326588, 46.231661199999998], [6.1315703, 46.231019799999999], [6.130163, 46.230080299999997], [6.1301111, 46.229871699999997], [6.1298716, 46.229651599999997], [6.1282976, 46.228555100000001], [6.1282652, 46.228532399999999], [6.1282598, 46.228365699999998], [6.1287265, 46.2280552], [6.1286179, 46.227977500000001], [6.1276932, 46.227351800000001], [6.1269849, 46.227791099999997], [6.1267842, 46.227625500000002], [6.1261779, 46.227102500000001], [6.1257888, 46.227347100000003], [6.1255018, 46.227113299999999], [6.1253398, 46.226871299999999], [6.1253948, 46.226841499999999], [6.1242276, 46.225730900000002], [6.1232585, 46.226084200000003], [6.1220688, 46.226734700000002], [6.1219883, 46.226753299999999], [6.1218958, 46.226705299999999], [6.1214433, 46.226289600000001], [6.1212178, 46.225974299999997], [6.1212989, 46.225843500000003], [6.1220981, 46.225146199999998], [6.1217616, 46.224838900000002], [6.1198869, 46.223512300000003], [6.1178161, 46.222161800000002], [6.1178022, 46.222022500000001], [6.1176755, 46.2219269], [6.1174455, 46.222066499999997], [6.1174401, 46.2220698], [6.116961, 46.221775100000002], [6.1139493, 46.220261600000001], [6.1138401, 46.220272000000001], [6.1146149, 46.2194924], [6.1152142, 46.218626499999999], [6.1162616, 46.217563300000002], [6.1172182, 46.216998699999998], [6.1186588, 46.216400999999998], [6.1192383, 46.216211999999999], [6.1187939, 46.215972100000002], [6.1184402, 46.216025600000002], [6.1178905, 46.2151523], [6.117499, 46.214581600000002], [6.1162828, 46.212942599999998], [6.1163222, 46.212868499999999], [6.1161187, 46.212592299999997], [6.115668, 46.212064900000001], [6.1148742, 46.211291199999998], [6.1148175, 46.211302500000002], [6.1147189, 46.211095800000002], [6.1146362, 46.211076599999998], [6.1149209, 46.210949900000003], [6.1147399, 46.210698000000001], [6.1146185, 46.210705400000002], [6.1145255, 46.210656], [6.1135501, 46.209609899999997], [6.1135036, 46.209623800000003], [6.1124787, 46.208619400000003], [6.111741, 46.207501399999998], [6.111397, 46.207032699999999], [6.1111706, 46.206700400000003], [6.1106272, 46.206004700000001], [6.110448, 46.205949500000003], [6.1102963, 46.205806899999999], [6.1102411, 46.205566400000002], [6.1103362, 46.204969699999999], [6.1105416, 46.203926699999997], [6.1106689, 46.203758800000003], [6.1108334, 46.202830300000002], [6.1106811, 46.202815700000002]]]]
        }]
    }
});

console.log(newQuiz.answer);

module.exports = app;